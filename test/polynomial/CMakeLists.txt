add_executable(test_polynomial_legendre legendre.cpp)
set_target_properties(test_polynomial_legendre PROPERTIES OUTPUT_NAME legendre)
add_test(NAME TestPolynomialLegendre COMMAND legendre)

add_executable(test_polynomial_quad quad.cpp)
target_include_directories(test_polynomial_quad PRIVATE ${EIGEN_INC})
set_target_properties(test_polynomial_quad PROPERTIES OUTPUT_NAME quad)
add_test(NAME TestPolynomialQuad COMMAND quad)

add_executable(test_polynomial_hexa hexa.cpp)
target_include_directories(test_polynomial_hexa PRIVATE ${EIGEN_INC})
set_target_properties(test_polynomial_hexa PROPERTIES OUTPUT_NAME hexa)
add_test(NAME TestPolynomialHexa COMMAND hexa)

add_executable(test_polynomial_basis basis.cpp)
target_include_directories(test_polynomial_basis PRIVATE ${EIGEN_INC})
set_target_properties(test_polynomial_basis PROPERTIES OUTPUT_NAME basis)
add_test(NAME TestPolynomialBasis COMMAND basis)

add_executable(test_polynomial_projection projection.cpp)
target_include_directories(test_polynomial_projection PRIVATE ${EIGEN_INC} ${CGNS_INC} ${METIS_INC} ${MPI_CXX_HEADER_DIR})
target_link_libraries(test_polynomial_projection cgns_shared metis)
set_target_properties(test_polynomial_projection PROPERTIES OUTPUT_NAME projection)
add_test(NAME TestPolynomialProjection COMMAND projection)

add_executable(test_polynomial_limiter limiter.cpp)
target_include_directories(test_polynomial_limiter PRIVATE ${EIGEN_INC} ${CGNS_INC} ${METIS_INC} ${MPI_CXX_HEADER_DIR})
target_link_libraries(test_polynomial_limiter cgns_shared metis)
set_target_properties(test_polynomial_limiter PROPERTIES OUTPUT_NAME limiter)
add_test(NAME TestPolynomialLimiter COMMAND limiter)
